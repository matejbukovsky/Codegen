<?php declare(strict_types=1);

namespace Codegen\Templates\Add;

use Codegen\Templates\AbstractTemplate;
use Nette\PhpGenerator\ClassType;

/**
 * @author Matej Bukovsky <matejbukovsky@gmail.com>
 */
class AddTemplate extends AbstractTemplate
{

	public function generateCode(): ClassType
	{
		/** @var $annotations \Codegen\Templates\Add\Add */
		$annotations = $this->getAnnotations();
		$paramType = $annotations->type;
		$allowKey = isset($annotations->allowKey) ? $annotations->allowKey : FALSE;
		$keyType = isset($annotations->keyType) ? $annotations->keyType : 'int';
		$classType = $this->getClassType();
		$className = $classType->getName();
		$method = 'add' . ucfirst(rtrim($this->getPropertyName(), 's'));

		$this->checkRequiredParam('type');
		$this->checkMethodExistence($method);

		$body = NULL;
		if ($allowKey) {
			$body = sprintf("if (\$key) {\n\t\$this->%1\$s[\$key] = \$value;\n} else {\n\t\$this->%1\$s[] = \$value;\n}\n\nreturn \$this;", $this->getPropertyName());
		} else {
			$body = sprintf("\$this->%1\$s[] = \$value;\n\nreturn \$this;", $this->getPropertyName());
		}

		$methodType = $classType->addMethod($method)
			->addComment('Generated by Codegen.')
			->addComment(sprintf('@return %s', $className))
			->setVisibility('public')
			->setReturnType('self')
			->setBody($body);

		$methodType->addParameter('value')
			->setTypeHint($paramType);

		if ($allowKey) {
			$methodType->addParameter('key')
				->setTypeHint($keyType)
				->setNullable(TRUE)
				->setDefaultValue(NULL);
		}

		return $classType;
	}

}